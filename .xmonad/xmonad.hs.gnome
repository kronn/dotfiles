--  vim:ft=haskell
import XMonad
import XMonad.Config.Gnome
import XMonad.Hooks.ManageDocks
import XMonad.Actions.CycleWS
import XMonad.Layout.IM
import XMonad.Layout.PerWorkspace

-- import XMonad.Util.EZConfig
-- import XMonad.Hooks.DynamicLog
-- import XMonad.Util.Run(spawnPipe)
-- import System.IO

import Data.Ratio ((%))
import qualified Data.Map as M

-- TODO maybe disable "focus follows mouse"
-- TODO add everything needed to integrate Xmonad with Gnome http://haskell.org/haskellwiki/Xmonad/Using_xmonad_in_Gnome
-- TODO pipe loghook into a gnome-panel (think "window titles")

-- basic Settings which may be needed more than once
theModifierKey = mod4Mask      -- Rebind Mod to the Windows key
theTerminal = "gnome-terminal" -- far from ideal, but nicely integrated

-- display settings
theBorderWidth = 2
theNormalBorderColor = "#202030"
theFocusedBorderColor = "#A0A0D0"

-- named Workspaces
theWorkspaces = ["web", "primary", "secondary" , "tertiary", "mail", "music" , "twitter", "irc", "chat"]

-- special Window handling
theManageHook = composeAll [
          className =? "Xmessage" --> doFloat,
          className =? "Do" --> doFloat, -- float GnomeDO (like you expect it)
          className =? "Nm-applet" --> doFloat, -- float pin-entry for surfstick
          className =? "Thunderbird" <&&> appName =? "Dialog" --> doFloat, -- float the PGP Pin-Entry
          -- className =? "Nautilus" <&&> stringProperty "_NET_WM_WINDOW_TYPE" =? "_NET_WM_WINDOW_TYPE_DIALOG" --> doFloat,

          -- send applications to the right workspace
          className =? "Empathy" --> doShift "chat",
          className =? "Pidgin" --> doShift "chat",
          className =? "Google-chrome" --> doShift "web",
          className =? "Thunderbird" --> doShift "mail",
          className =? "Rythmbox" --> doShift "music",
          className =? "banshee" --> doShift "music", -- oh the joy of consistent WM_CLASS-names ...

          manageDocks
    ]

-- associate :: WorkspaceId -> String -> ManageHook
-- associate area wmClass = className =? wmClass --> doShift area

-- special layouts
imLayout = IM (1%6) (Or (Role "contact_list") (Role "buddy_list"))
  -- (And (ClassName "Pidgin")  (Role "buddy_list"))
  -- (And (ClassName "Empathy") (Role "contact_list"))
  -- (And (ClassName "Skype")   (And (Role "") (Not (Title "Options"))))

-- TODO codeLayout

theLayouts = onWorkspaces ["chat"] imLayout

-- custom keybindings
theKeys (XConfig {modMask = modm}) = M.fromList $ [
          -- moving to next/previous Workspace with Mod-Right/Mod-Left
          -- this needs XMonad.Actions.CycleWS
          ((shiftMask .|. modm , xK_Left),  shiftToPrev),
          ((shiftMask .|. modm , xK_Right), shiftToNext),
          ((modm , xK_Right), nextWS),
          ((modm , xK_Left), prevWS)
    ]

-- wire everything up and together
main = do
    xmonad $ gnomeConfig {
        modMask = theModifierKey,
        terminal = theTerminal,
        manageHook = theManageHook <+> manageHook gnomeConfig,
        layoutHook = avoidStruts $ theLayouts $ layoutHook gnomeConfig,
        workspaces = theWorkspaces,
        keys = \c -> theKeys c `M.union` keys gnomeConfig c,
        borderWidth = theBorderWidth,
        normalBorderColor = theNormalBorderColor,
        focusedBorderColor = theFocusedBorderColor
    }
