--  vim:ft=haskell
import XMonad
import XMonad.Config.Gnome
import XMonad.Hooks.ManageDocks
import XMonad.Actions.CycleWS
import XMonad.Actions.DynamicWorkspaces
import XMonad.Layout.IM
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Reflect
import XMonad.Layout.Tabbed
import XMonad.Layout.ComboP
import XMonad.Layout.TwoPane

-- import XMonad.Util.EZConfig
-- import XMonad.Hooks.DynamicLog
-- import XMonad.Util.Run(spawnPipe)
-- import System.IO

import Data.Ratio ((%))
import qualified Data.Map as M

import qualified XMonad.StackSet as W
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.Place


-- TODO maybe disable "focus follows mouse"
-- TODO add everything needed to integrate Xmonad with Gnome http://haskell.org/haskellwiki/Xmonad/Using_xmonad_in_Gnome
-- TODO pipe loghook into a gnome-panel (think "window titles")

-- basic Settings which may be needed more than once
theModifierKey = mod4Mask      -- Rebind Mod to the Windows key
theTerminal = "gnome-terminal" -- far from ideal, but nicely integrated

-- display settings
theBorderWidth = 1
-- theBorderWidth = 0
theNormalBorderColor = "#202030"
theFocusedBorderColor = "#cc9933"
-- 9999cc
-- 7ca67c
-- 3d4c42
-- e53535
-- bfccb8

-- named Workspaces
theWorkspaces = ["web", "primary", "secondary" , "tertiary", "mail", "music" , "gimp", "irc", "chat"]

-- -- dymanic Workspaces
-- doNewWS tg = (liftX $ addUniqueHiddenWS tg) >> doShift tg
-- addUniqueHiddenWS tg = withWindowSet $ s -> if null (filter ( (== tg) . W.tag) (W.workspaces s))
--                                               then addHiddenWorkspace tg 
--                                             else return()

-- special Window handling
theManageHook = composeAll [
        className =? "Xmessage" --> doFloat,
        className =? "Do" --> doFloat, -- float GnomeDO (like you expect it)
        className =? "Nm-applet" --> doFloat, -- float pin-entry for surfstick
        className =? "Thunderbird" <&&> appName =? "Dialog" --> doFloat, -- float the PGP Pin-Entry
        -- className =? "Nautilus" <&&> stringProperty "_NET_WM_WINDOW_TYPE" =? "_NET_WM_WINDOW_TYPE_DIALOG" --> doFloat,
        className =? "Screenkey" --> placeHook( fixed(0,1) ) <+> doFloat <+> doF W.focusDown,
        -- className =? "Screenkey" --> doFloat <+> doF W.focusDown,

        -- send applications to the right workspace
        className =? "Empathy" --> doShift "chat",
        className =? "Pidgin" --> doShift "chat",
        className =? "Google-chrome" --> doShift "web",
        className =? "Thunderbird" --> doShift "mail",
        className =? "Rythmbox" --> doShift "music",
        className =? "banshee" --> doShift "music", -- oh the joy of consistent WM_CLASS-names ...

        className =? "Gtimelog" --> doShift "gimp", -- not exactly gimp, but thats more a tool-space
        className =? "Gimp-2.6" --> doShift "gimp",

        manageDocks
    ]

-- associate :: WorkspaceId -> String -> ManageHook
-- associate area wmClass = className =? wmClass --> doShift area

-- building blocks for Layouts
tiledLayout = Tall nmaster delta ratio
  where
    nmaster = 1     -- The default number of windows in the master pane
    delta   = 3/100 -- Percent of screen to increment by when resizing panes
    ratio   = 1/2   -- Default proportion of screen occupied by master pane

biggerMasterLayout = Tall nmaster delta ratio
  where
    nmaster = 1
    delta   = 3/100
    ratio   = 2/3

-- standard layout
defaultLayout = tiledLayout ||| Mirror tiledLayout ||| Full

-- defaultLayout with a different starting Point
fullFirstLayout = Full ||| tiledLayout ||| Mirror tiledLayout

-- special layouts
imLayout = IM (1%6) (Or
                      (Or (Role "contact_list") (Role "buddy_list"))
                      (And (ClassName "Skype") (Title "der_kronn - Skype™ (Beta)"))
                    )
-- (And (ClassName "Pidgin")  (Role "buddy_list"))
-- (And (ClassName "Empathy") (Role "contact_list"))
-- (Title "der_kronn - Skype™ (Beta)")
-- (And (ClassName "Skype")   (And (Role "") (Not (Title "Options"))))

tabbedLayout = tabbedBottomAlways shrinkText defaultTheme

-- gimpLayout = IM (1%6) (Role "gimp-toolbox") $ reflectHoriz $ IM (1%5) (Role "gimp-dock")
-- gimpLayout = tabbedLayout ****||* Full
-- gimpLayout = Full *||**** tabbedLayout
-- gimpLayout = combineTwoP (TwoPane 0.04 0.82) (tabbedLayout) (Full) (Not (Role "gimp-toolbox"))
gimpLayout = combineTwoP (TwoPane 0.04 0.82) (tabbedLayout) (Full) (Not (Or (Role "gimp-dock") (Role "gimp-toolbox")))

codeLayout = biggerMasterLayout ||| Mirror biggerMasterLayout

-- TODO optimize so that the screenkey-window is not overlaying anything
-- presenterLayout = Mirror (Tall 1 (5%100) (4/5))
-- presenterLayout = combineTwoP (Mirror (TwoPane 0.04 0.82)) (Full) (Full) (Not (Role "something-that-does-not-exist"))
-- presenterLayout = (Mirror (TwoPane 0.1 0.9))
presenterLayout = Mirror (Tall 1 (5%100) (90%100))

ircLayout = Full ||| tiledLayout ||| Mirror tiledLayout

theLayouts = onWorkspace "chat" imLayout
              .  onWorkspace "web" fullFirstLayout
              .  onWorkspace "irc" ircLayout
              .  onWorkspace "primary" codeLayout
              .  onWorkspace "secondary" codeLayout
              .  onWorkspace "tertiary" codeLayout
              -- .  onWorkspace "tertiary" presenterLayout
              -- .  onWorkspace "gimp" gimpLayout

-- custom keybindings
theKeys (XConfig {modMask = modm}) = M.fromList $ [
          -- moving to next/previous Workspace with Mod-Right/Mod-Left
          -- this needs XMonad.Actions.CycleWS
          ((shiftMask .|. modm , xK_Left),  shiftToPrev),
          ((shiftMask .|. modm , xK_Right), shiftToNext),
          ((modm , xK_Right), nextWS),
          ((modm , xK_Left), prevWS)
    ]

-- wire everything up and together
main = do
    xmonad $ gnomeConfig {
        modMask = theModifierKey,
        terminal = theTerminal,
        manageHook = theManageHook <+> manageHook gnomeConfig,
        layoutHook = avoidStruts $ theLayouts $ layoutHook gnomeConfig,
        workspaces = theWorkspaces,
        keys = \c -> theKeys c `M.union` keys gnomeConfig c,
        borderWidth = theBorderWidth,
        normalBorderColor = theNormalBorderColor,
        focusedBorderColor = theFocusedBorderColor
    }
