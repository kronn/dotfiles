import XMonad
import XMonad.Config.Gnome
import XMonad.Hooks.ManageDocks
import XMonad.Actions.CycleWS

-- import XMonad.Util.EZConfig
-- import XMonad.Hooks.DynamicLog
-- import XMonad.Util.Run(spawnPipe)
-- import System.IO

import qualified Data.Map as M

-- TODO add IM Layout for tiling Empathy or Pidgin nicely
-- TODO pipe loghook into a gnome-panel (think "window titles")

-- basic Settings which may be needed more than once
theModifierKey = mod4Mask      -- Rebind Mod to the Windows key
theTerminal = "gnome-terminal" -- far from ideal, but nicely integrated

main = do
    xmonad $ gnomeConfig {
        modMask = theModifierKey,
        terminal = theTerminal,
        manageHook = theManageHook <+> manageHook gnomeConfig,
        -- layoutHook = avoidStruts  $  layoutHook gnomeConfig,
        workspaces = theWorkspaces,
        keys = \c -> theKeys c `M.union` keys gnomeConfig c,
        borderWidth = 2,
        normalBorderColor = "#333333",
        focusedBorderColor = "#ff3333"
    }

-- named Workspaces
theWorkspaces = ["web", "primary", "secondary" , "tertiary", "mail", "music" , "irc", "twitter", "chat"]

-- special Window handling
theManageHook = composeAll [
          className =? "Xmessage" --> doFloat,
          className =? "Do" --> doFloat, -- float GnomeDO (like you expect it)
          -- className =? "Nautilus" <&&> stringProperty "_NET_WM_WINDOW_TYPE" =? "_NET_WM_WINDOW_TYPE_DIALOG" --> doFloat,

          -- send applications to the right workspace
          className =? "Empathy" --> doShift "chat",
          className =? "Google-chrome" --> doShift "web",
          className =? "Thunderbird" --> doShift "mail",
          className =? "Rythmbox" --> doShift "music",
          className =? "banshee" --> doShift "music", -- oh the joy of cosistent WM_CLASS-names ...

          manageDocks
    ]

-- associate :: WorkspaceId -> String -> ManageHook
-- associate area wmClass = className =? wmClass --> doShift area

-- custom keybindings
theKeys (XConfig {modMask = modm}) = M.fromList $ [
          -- moving to next/previous Workspace with Mod-Right/Mod-Left
          -- this needs XMonad.Actions.CycleWS
          ((modm , xK_Right), nextWS),
          ((modm , xK_Left), prevWS)
    ]
