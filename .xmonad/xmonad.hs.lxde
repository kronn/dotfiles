--  vim:ft=haskell:fdm=marker
import XMonad
import XMonad.Actions.CycleWS
import XMonad.Actions.CopyWindow       -- for having the same window on multiple workspaces
import qualified XMonad.Actions.FlexibleManipulate as Flex

import XMonad.Config.Desktop

import XMonad.Hooks.DynamicLog         -- for enabling any loghook
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.Place

import XMonad.Layout.Circle            -- movie OS 1.0 -- arrange windows in a circle around a main window
import XMonad.Layout.Grid
import XMonad.Layout.IM
import XMonad.Layout.NoBorders         -- remove borders for lonely windows
import XMonad.Layout.PerWorkspace
import XMonad.Layout.ThreeColumns

import XMonad.Util.Run(spawnPipe)      -- xmobar support
import System.IO                       -- xmobar support

import Data.Ratio ((%))                -- used for various layouts
import qualified Data.Map as M         -- used for merging key-sets and mouse-bindings
import qualified XMonad.StackSet as W  -- used for screenkey floating and window-copying

-- basic Settings which may be needed more than once
theModifierKey = mod4Mask      -- Rebind Mod to the Windows key
theTerminal = "urxvt"          -- better reflowing of text, but has learning-curve

-- display settings
theBorderWidth = 1
-- theBorderWidth = 0
theNormalBorderColor = "#202030"
theFocusedBorderColor = "#cc9933"
-- 9999cc
-- 7ca67c
-- 3d4c42
-- e53535
-- bfccb8

-- named Workspaces
theWorkspaces = ["1:web", "2:code", "3:code" , "4:code", "5:mail", "6:music" , "7:tools", "8:irc", "9:chat"]

-- special Window handling
theManageHook = composeAll [
        className =? "Xmessage" --> doFloat,
        className =? "Do" --> doFloat, -- float GnomeDO (like you expect it)
        -- className =? "Nm-applet" --> doFloat, -- float pin-entry for surfstick
        -- className =? "Thunderbird" <&&> appName =? "Dialog" --> doFloat, -- float the PGP Pin-Entry
        className =? "Nautilus" <&&> stringProperty "_NET_WM_WINDOW_TYPE" =? "_NET_WM_WINDOW_TYPE_DIALOG" --> doFloat,
        className =? "Screenkey" --> placeHook( fixed(0,1) ) <+> doFloat <+> doF W.focusDown, -- float, but don't focus.
        className =? "glTail" --> doFloat,

        -- send applications to the right workspace
        className =? "Empathy" --> doShift "9:chat",
        className =? "Pidgin" --> doShift "9:chat",
        className =? "Google-chrome" --> doShift "1:web",
        className =? "Thunderbird" --> doShift "5:mail",
        className =? "Claws-mail" --> doShift "5:mail",
        className =? "Rythmbox" --> doShift "6:music",
        className =? "banshee" --> doShift "6:music", -- oh the joy of consistent WM_CLASS-names ...

        className =? "Gtimelog" --> doShift "7:tools",
        className =? "Gimp-2.6" --> doShift "7:tools",

        manageDocks
    ]

-- associate :: WorkspaceId -> String -> ManageHook
-- associate area wmClass = className =? wmClass --> doShift area

-- building blocks for Layouts
tiledLayout = Tall nmaster delta ratio
  where
    nmaster = 1     -- The default number of windows in the master pane
    delta   = 3/100 -- Percent of screen to increment by when resizing panes
    ratio   = 1/2   -- Default proportion of screen occupied by master pane

biggerMasterLayout = Tall nmaster delta ratio
  where
    nmaster = 1
    delta   = 3/100
    ratio   = 2/3

-- standard layout
defaultLayout = tiledLayout ||| Mirror tiledLayout ||| Full

-- defaultLayout with a different starting Point
fullFirstLayout = Full ||| tiledLayout ||| Mirror tiledLayout

-- special layouts
imRatio = (1%6)
imLayoutClasses = ( Grid ||| Mirror(Grid) )

psiLayout    = withIM imRatio (And (ClassName "psi") (Resource "main")) imLayoutClasses
pidginLayout = withIM imRatio (And (ClassName "Pidgin") (Role "buddy_list")) imLayoutClasses
skypeLayout  = withIM imRatio (And (ClassName "Skype") (Title "der_kronn - Skypeâ„¢")) imLayoutClasses

-- imLayout = pidginLayout ||| skypeLayout ||| psiLayout
-- imLayout = pidginLayout ||| skypeLayout
imLayout = pidginLayout

threeColLayout = ThreeColMid nmaster delta ratio
  where
    nmaster = 1
    delta   = 3/100
    ratio   = 2/3

codeLayout = biggerMasterLayout ||| Mirror biggerMasterLayout

circleLayout = Circle ||| Full

-- TODO optimize so that the screenkey-window is not overlaying anything
presenterLayout = Mirror (Tall 1 (5%100) (90%100))

ircLayout = Full ||| tiledLayout ||| Mirror tiledLayout

theLayouts = onWorkspace "9:chat" imLayout
           . onWorkspace "1:web" fullFirstLayout
           . onWorkspace "8:irc" ircLayout
           . onWorkspace "2:code" codeLayout
           . onWorkspace "3:code" codeLayout
           . onWorkspace "4:code" codeLayout
           . onWorkspace "6:music" circleLayout
           -- . onWorkspace "4:code" presenterLayout
           . onWorkspace "7:tools" threeColLayout

-- custom keybindings
-- mod-[1..9] @@ Switch to workspace N
-- mod-shift-[1..9] @@ Move client to workspace N
-- mod-control-shift-[1..9] @@ Copy client to workspace N
theKeys (XConfig {modMask = modm}) = M.fromList $ [
          -- moving to next/previous Workspace with Mod-Right/Mod-Left
          -- this needs XMonad.Actions.CycleWS
          ((shiftMask .|. modm , xK_Left),  shiftToPrev),
          ((shiftMask .|. modm , xK_Right), shiftToNext),
          ((modm , xK_Right), nextWS),
           ((modm , xK_Left), prevWS),


          -- tooling around copying a window to another space
          -- this needs XMonad.Actions.CopyWindow and XMonad.StackSet as W
          ((modm .|. shiftMask, xK_c     ), kill1), -- @@ Close the focused window
          ((modm, xK_v ), windows copyToAll), -- @@ Make focused window always visible
          ((modm .|. shiftMask, xK_v ),  killAllOtherCopies) -- @@ Toggle window state back

    ] ++ -- (++) is needed here because the following list comprehension
         -- is a list, not a single key binding. Simply adding it to the
         -- list of key bindings would result in something like [ b1, b2,
         -- [ b3, b4, b5 ] ] resulting in a type error. (Lists must
         -- contain items all of the same type.)

         -- copying window to another Workspace with Mod-Ctrl-Shift-N
          [((m .|. modm, k), windows $ f i)
               | (i, k) <- zip theWorkspaces [xK_1, xK_2, xK_3, xK_4, xK_5, xK_6, xK_7, xK_8, xK_9]
               , (f, m) <- [(W.view, 0), (W.shift, shiftMask), (copy, shiftMask .|. controlMask)]]

-- mouse bindings
myMouse (XConfig {modMask = modm}) = [
    -- move a floated window with the mouse.
    ((modm, button1), (\w -> focus w >> Flex.mouseWindow Flex.linear w))
  ]
theMouse x = M.union (mouseBindings desktopConfig x) (M.fromList (myMouse x))


-- custom functions
--
-- none, currently

-- wire everything up and together
main :: IO ()
main = do
    -- spawn "lxpanel"

    xmproc <- spawnPipe "xmobar"
    spawn "killall trayer; trayer --edge top --align right --widthtype percent --width 13 --height 18 --transparent true --alpha 0 --tint 0x000000"

    spawn "xcompmgr"           -- transparency
    spawn "/bin/sh ~/.fehbg &" -- background image

    xmonad $ desktopConfig { modMask = theModifierKey
      , logHook = dynamicLogWithPP xmobarPP
                        { ppOutput = hPutStrLn xmproc
                        , ppTitle = xmobarColor "green" "" . shorten 100
                        }
      , terminal = theTerminal
      , manageHook = theManageHook <+> manageHook desktopConfig
      , layoutHook = avoidStruts $ smartBorders $ theLayouts $ layoutHook desktopConfig
      , workspaces = theWorkspaces
      , keys = \c -> theKeys c `M.union` keys desktopConfig c
      , mouseBindings = theMouse
      , borderWidth = theBorderWidth
      , normalBorderColor = theNormalBorderColor
      , focusedBorderColor = theFocusedBorderColor
    }
